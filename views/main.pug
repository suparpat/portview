html
	head
		title PortView
		meta(name='viewport', content='width = device-width,initial-scale=1.0')
		link(rel='stylesheet' href='/css/style.css')
		link(rel="stylesheet" type="text/css" href="/lib/DataTables/datatables.min.css")
		link(rel="stylesheet" type="text/css" href="/lib/DataTables/Buttons-2.0.1/css/buttons.dataTables.min.css")
		
	body
		script.
			var data= !{JSON.stringify(data)}
			var port= !{JSON.stringify(port)}
			var stats= !{JSON.stringify(stats)}

		h1 PortView
		a(href="/update") Update

		if port
			h3 Stats

			table
				thead
					tr
						td Item
						td Value ($)
				tbody
				tr
					td initial amount
					td #{stats.initial_amount}
				tr
					td Total gain/loss (%)
					td #{roundTo2(stats.sum_diff + stats.realized)} (#{roundTo2((stats.sum_diff + stats.realized) / stats.initial_amount * 100)}%)
				tr
					td Unrealized/Realized
					td #{stats.sum_diff} / #{stats.realized}


				- var holdingsCost = port.reduce((accum, curr) => accum + parseFloat(curr.cost * curr.shares), 0)
				tr
					td Portfolio Cost
					td #{roundTo2(holdingsCost)}

				- var holdingsWorth = port.reduce((accum, curr) => accum + parseFloat(curr.value), 0)
				tr
					td Net Worth
					td #{roundTo2(holdingsWorth)}

				- let count = 0
				- var topTenPerc = port.reduce((accum, curr, idx) => {
				- 	if(count < 10 && curr.symbol != 'CASH'){
				-		count++
				-		return accum + parseFloat(curr.weight)
				- 	}else{
				- 		return accum
				- 	}
				- }, 0)
				tr
					td Top 10 % (ex cash)
					td #{roundTo2(topTenPerc)}%


			
			hr
			h3 Summary
			table
				thead
					tr
						th #
						th Weight
						th Symbol
						th Market Cap (bn)
						th Price
						th Cost/Share ($)
						th Qty
						th Unrealized ($)
						th Unrealized %
						th Realized
						th Realized %
				tbody
					each r, idx in port
						if r.shares > 0
							tr
								td #{idx + 1}
								td #{r.weight}%
								td #{r.symbol}

								if r.enrich
									td #{r.enrich.quote.price.marketCap ? (roundTo2(r.enrich.quote.price.marketCap/1000000000)) : ""}
									td #{r.enrich.quote.price.currencySymbol}#{r.enrich.quote.price.regularMarketPrice}
								else
									td
									if r.price
										td #{r.price}
									else
										td
								td #{r.cost}
								td #{r.shares}
								td #{r.diff}
								td #{r.diffPercent}%
								td #{roundTo2(r.realized)}
								td #{r.realized != 0 ? roundTo2(r.realized/r.realized_cost * 100) + "%" : ""}
				tr
					- var totalWeight = port.reduce((accum, curr) => accum + parseFloat(curr.weight), 0)
					td
					td #{roundTo2(totalWeight)}
					td
					td
					td
					td
					td
					- var totalVal = port.reduce((accum, curr) => accum + parseFloat(curr.value), 0)
					- var totalCost = port.reduce((accum, curr) => accum + parseFloat(curr.cost * curr.shares), 0)
					- var totalDiff = port.reduce((accum, curr) => accum + parseFloat(curr.diff), 0)
					- var totalDiffPercent = roundTo2(totalDiff/totalVal * 100)
					- var totalRealized = roundTo2(port.reduce((accum, curr) => accum + parseFloat(curr.realized), 0))
					- var totalRealizedCost = roundTo2(port.reduce((accum, curr) => accum + parseFloat(curr.realized_cost), 0))					
					td $#{roundTo2(totalDiff)}
					td #{totalDiffPercent}%
					td $#{totalRealized}
					td #{totalRealized != 0 ? roundTo2(totalRealized/totalRealizedCost * 100) + "%" : ""}

			.container(style="width: 450px !important; height: 450px !important")
				canvas(id="myChart")

			div(id="gd")

			hr
			h3 Data

			table
				thead
					tr
						th #
						th Symbol
						th Weight
						th Name
						//- th Exchange
						//- th Sector

						th Market Cap (bn)
						th Trailing P/E
						th Forward P/E

						th Ratings
						th Target
						th Target %

						//- th Country
						//- th Currency
						th Price
						th Cost/Share ($)
						th Qty
						th Value ($)
						th Cost ($)
						th Unrealized ($)
						th Unrealized %
						th Realized
						th Realized Cost
						th Realized %
				tbody
					each r, idx in port
						tr
							td #{idx + 1}
							td #{r.symbol}
							td #{r.weight}%
							if r.enrich
								td #{r.enrich.quote.price.shortName}
								//- td #{r.enrich.quote.price.exchangeName}
								//- td #{r.enrich.quote.summaryProfile ? r.enrich.quote.summaryProfile.sector : ""}


								td #{r.enrich.quote.price.marketCap ? (roundTo2(r.enrich.quote.price.marketCap/1000000000)) : ""}
								td #{r.enrich.quote.summaryDetail.trailingPE ? roundTo2(r.enrich.quote.summaryDetail.trailingPE) : ""}
								td #{r.enrich.quote.summaryDetail.forwardPE ? roundTo2(r.enrich.quote.summaryDetail.forwardPE) : ""}

								- let trend = r.enrich.quote.recommendationTrend ? (r.enrich.quote.recommendationTrend.trend[0]) : null
								- let sumTrends = trend ? (parseFloat(trend.buy) + parseFloat(trend.strongBuy) + parseFloat(trend.sell) + parseFloat(trend.hold) + parseFloat(trend.strongSell)) : ''

								if r.enrich.quote.financialData
									td #{r.enrich.quote.financialData ? (r.enrich.quote.financialData.recommendationMean) : ""} #{r.enrich.quote.financialData ? ("(" + r.enrich.quote.financialData.recommendationKey) : ""}, #{sumTrends})
								else 
									td
								
								td #{r.enrich.quote.financialData ? (r.enrich.quote.financialData.targetMeanPrice) : ""} 
								td #{r.enrich.quote.financialData ? (roundTo2(((r.enrich.quote.financialData.targetMeanPrice - r.enrich.quote.price.regularMarketPrice)/r.enrich.quote.price.regularMarketPrice)* 100) + "%") : ""} 

								//- td #{r.enrich.quote.summaryProfile ? r.enrich.quote.summaryProfile.country : ""}
								//- td #{r.enrich.quote.price.currency}
								td #{r.enrich.quote.price.currencySymbol}#{r.enrich.quote.price.regularMarketPrice}
							else
								td
								td
								td
								td
								td
							td #{r.cost}
							td #{r.shares}
							td #{r.value}
							td #{roundTo2(r.cost * r.shares)}
							td #{r.diff}
							td #{r.diffPercent}%
							td $#{roundTo2(r.realized)}
							td #{roundTo2(r.realized_cost)}
							td #{r.realized != 0 ? roundTo2(r.realized/r.realized_cost * 100) + "%" : ""}
				tr
					- var totalWeight = port.reduce((accum, curr) => accum + parseFloat(curr.weight), 0)
					td
					td #{roundTo2(totalWeight)}
					td
					td
					td
					td
					td
					td
					td
					td
					td
					td
					td
					- var totalVal = port.reduce((accum, curr) => accum + parseFloat(curr.value), 0)
					- var totalCost = port.reduce((accum, curr) => accum + parseFloat(curr.cost * curr.shares), 0)
					- var totalDiff = port.reduce((accum, curr) => accum + parseFloat(curr.diff), 0)
					- var totalDiffPercent = roundTo2(totalDiff/totalVal * 100)
					- var totalRealized = roundTo2(port.reduce((accum, curr) => accum + parseFloat(curr.realized), 0))
					- var totalRealizedCost = roundTo2(port.reduce((accum, curr) => accum + parseFloat(curr.realized_cost), 0))

					td $#{roundTo2(totalVal)}
					td $#{roundTo2(totalCost)}
					td $#{roundTo2(totalDiff)}
					td #{totalDiffPercent}%
					td $#{totalRealized}
					td $#{totalRealizedCost}
					td #{totalRealized != 0 ? roundTo2(totalRealized/totalRealizedCost * 100) + "%" : ""}

		script(type="text/javascript" src="lib/jquery-3.2.1.min.js")
		script(type="text/javascript" src="lib/DataTables/datatables.js")
		script(type="text/javascript" src="lib/DataTables/pdfmake-0.1.36/pdfmake.min.js")
		script(type="text/javascript" src="lib/DataTables/pdfmake-0.1.36/vfs_fonts.js")
		script(type="text/javascript" src="lib/DataTables/JSZip-2.5.0/jszip.min.js")
		script(type="text/javascript" src="lib/DataTables/Buttons-2.0.1/js/buttons.html5.js")
		script(type="text/javascript" src="lib/DataTables/Buttons-2.0.1/js/buttons.print.js")
		script(type="text/javascript" src="lib/chartjs/chart.js")
		script(type="text/javascript" src="lib/plotly-2.11.1.min.js")
		script(type="text/javascript" src="main.js")

